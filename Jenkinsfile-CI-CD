#!/groovy
@Library('cx-jenkins-pipeline-kit') _
import java.time.*

def workspace
def vmName = "${BUILD_TAG}-CxSAST"
def vmTemplate90 = "CxSDLC-Template-CxSAST-9-0"
def vmTemplate92 = "CxSDLC-Template-CxSAST-9-2"
def vmTemplate93 = "CxSDLC-Template-CxSAST-9-3"
def ipAddress90
def ipAddress92
def ipAddress93
def ram = "12000"
def cpu = "4"
def provider = "VMWARE"
def decommissionPeriod = "3 hour"
def vmwareNetwork = "Lab"
def automationBranch = "9.0.0"

pipeline {
    parameters {
        //string(name: 'sastVersions', defaultValue: '8.9,9.0,9.2', description: 'Nodes to build, deploy and test')
        //string(name: 'jenkinsVersions', defaultValue: 'jenkins01,jenkins02', description: 'App names')
        string(name: "vmTemplate90",defaultValue: "${vmTemplate90}", description: "Template for 9.0 VM")
        string(name: "vmTemplate92",defaultValue: "${vmTemplate92}", description: "Template for 9.2 VM")
        string(name: "vmTemplate93",defaultValue: "${vmTemplate93}", description: "Template for 9.3 VM")
        string(name: "ram",defaultValue: "${ram}", description: "Server memory")
        string(name: "cpu",defaultValue: "${cpu}", description: "")
        string(name: "provider",defaultValue: "${provider}", description: "IAAS platform to be used")
        string(name: "decommissionPeriod",defaultValue: "${decommissionPeriod}", description: "Decommission period")
        string(name: "vmwareNetwork",defaultValue: "${vmwareNetwork}", description: "vmware network for new VMs")
        string(name: "automationBranch", defaultValue: "${automationBranch}", description: "automation branch")
    }
    agent { node { label 'CxSDLC-Slave-CxCLI' } }
    options {
        timestamps()
        timeout(time: 2, unit: 'HOURS')
        //skipDefaultCheckout()
    }
    stages {

        stage('Pipeline Info') {
            steps {
                script {
                    env.PIPELINE_STATUS = "Success"
                    env.STAGE_NAME_FAILED = "None"
                    if (BRANCH_NAME == 'master') {
                        Calendar cal = Calendar.getInstance(Locale.US)
                        int quarter = (cal.get(Calendar.MONTH) / 3) + 1
                        int year = cal.get(Calendar.YEAR)
                        env.cxCliVersion = "${year}.${quarter}.${BUILD_NUMBER}"
                        sh "sed -e 's/\${cxcli.version}/${env.cxCliVersion}/g' -i ./pom.xml"
                    } else {
                        env.cxCliVersion = "${BUILD_TAG}"
                    }
                    workspace = pwd()
                    if (env.automationBranch == null) {
                        env.automationBranch = automationBranch
                    }
                    sh 'printenv'
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    sh "docker run --rm --name build-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}:/usr/src/cx-cli -w /usr/src/cx-cli maven:3.6.1-jdk-8-alpine mvn clean process-resources install -DskipTests -Dcxcli.version=${env.cxCliVersion}"
                }
            }
            post {
                failure {
                    script {
                        env.PIPELINE_STATUS = "Failure"
                        env.STAGE_NAME_FAILED = "${STAGE_NAME}"
                    }
                }
            }
        }

        stage('UT-IT & Sonar') {
            parallel {

                stage('Run Unit & Integration Tests') {
                    steps {
                        script {
                            sh "docker run --rm --name test-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}:/usr/src/cx-cli -w /usr/src/cx-cli maven:3.6.1-jdk-8-alpine mvn test verify -Dcxcli.version=${env.cxCliVersion}"
                        }
                    }
                    post {
                        failure {
                            script {
                                env.PIPELINE_STATUS = "Failure"
                                env.STAGE_NAME_FAILED="${STAGE_NAME}"
                            }
                        }
                    }
                }

                stage('Run Code Quality') {
                    environment {
                        SONAR_CLOUD_TOKEN = credentials('sonarcloud')
                    }
                    steps {
                        script {
                            sh "docker run --rm --name sonar-${BUILD_TAG} -v maven-repo:/root/.m2 -v ${workspace}:/usr/src/cx-cli -w /usr/src/cx-cli maven:3.6.1-jdk-8-alpine mvn sonar:sonar -Dcxcli.version=${env.cxCliVersion}"
                            def sonarTaskUrl = sh (returnStdout: true, script: "awk '/./{line=\$0} END{print line}' ./target/sonar/report-task.txt | cut -d '=' -f '2,3'").trim()
                            def sonarTaskStatus = sh (returnStdout: true, script: "curl -s -u ${SONAR_CLOUD_TOKEN}: ${sonarTaskUrl} | jq -r '.task.status'").trim()
                            while (sonarTaskStatus == 'PENDING' || sonarTaskStatus == 'IN_PROGRESS') {
                                echo "Sonar task status is: ${sonarTaskStatus}. Waiting for 5 seconds..."
                                sleep(5)
                                sonarTaskStatus = sh (returnStdout: true, script: "curl -s -u ${SONAR_CLOUD_TOKEN}: ${sonarTaskUrl} | jq -r '.task.status'").trim()
                            }
                            if (sonarTaskStatus == "FAILED" || sonarTaskStatus == "CANCELED") {
                                Error_Msg("Sonar scan ${sonarTaskStatus}. You can find more details at https://sonarcloud.io/dashboard?id=checkmarx-ltd_CLI")
                                error "Sonar scan ${sonarTaskStatus}. You can find more details at https://sonarcloud.io/dashboard?id=checkmarx-ltd_CLI"
                            }
                            def sonarAnalysisId = sh (returnStdout: true, script: "curl -s -u ${SONAR_CLOUD_TOKEN}: ${sonarTaskUrl} | jq -r '.task.analysisId'").trim()
                            def sonarResultsStatus = sh (returnStdout: true, script: "curl -s -u ${SONAR_CLOUD_TOKEN}: https://sonarcloud.io/api/qualitygates/project_status?analysisId=${sonarAnalysisId} | jq -r '.projectStatus.status'").trim()
                            if (sonarResultsStatus == "ERROR") {
                                kit.Error_Msg("Sonar scan FAILED. You can find more details at https://sonarcloud.io/dashboard?id=checkmarx-ltd_CLI")
                                error "Sonar scan FAILED. You can find more details at https://sonarcloud.io/dashboard?id=checkmarx-ltd_CLI"
                            }
                        }
                    }
                    post {
                        failure {
                            script {
                                env.PIPELINE_STATUS = "Failure"
                                env.STAGE_NAME_FAILED="${STAGE_NAME}"
                            }
                        }
                    }
                }
            }
        }

        stage('Create CxSAST VM') {
            when {
                expression {
                    BRANCH_NAME == 'master' || BRANCH_NAME.startsWith("PR-") && CHANGE_TARGET == 'master' || BRANCH_NAME == 'add-ci-cd'
                }
            }
            parallel {
                stage('9.0') {
                    steps {
                        script {
                            kit.Create_Vm_Terraform(vmName + "-9.0", vmTemplate90, ram, cpu, provider, decommissionPeriod, "Auto", "Plugins-CI", vmwareNetwork)
                            ipAddress90 = kit.getIpAddress(vmName + "-9.0", provider)
                            node('install01') {
                                kit.Create_Jenkins_Slave_On_Master(vmName + "-9.0")
                                kit.Start_Jenkins_Slave_On_Windows_Pstools(ipAddress90, vmName + "-9.0")
                            }
                        }
                    }
                }
                stage('9.2') {
                    steps {
                        script {
                            kit.Create_Vm_Terraform(vmName + "-9.2", vmTemplate92, ram, cpu, provider, decommissionPeriod, "Auto", "Plugins-CI", vmwareNetwork)
                            ipAddress92 = kit.getIpAddress(vmName + "-9.2", provider)
                            node('install01') {
                                kit.Create_Jenkins_Slave_On_Master(vmName + "-9.2")
                                kit.Start_Jenkins_Slave_On_Windows_Pstools(ipAddress92, vmName + "-9.2")
                            }
                        }
                    }
                }
                stage('9.3') {
                    steps {
                        script {
                            kit.Create_Vm_Terraform(vmName + "-9.3", vmTemplate93, ram, cpu, provider, decommissionPeriod, "Auto", "Plugins-CI", vmwareNetwork)
                            ipAddress93 = kit.getIpAddress(vmName + "-9.3", provider)
                            node('install01') {
                                kit.Create_Jenkins_Slave_On_Master(vmName + "-9.3")
                                kit.Start_Jenkins_Slave_On_Windows_Pstools(ipAddress93, vmName + "-9.3")
                            }
                        }
                    }
                }
            }
        }

        /*stage('System Tests') {
            when {
                expression {
                    BRANCH_NAME == 'master' || BRANCH_NAME.startsWith("PR-") && CHANGE_TARGET == 'master' || BRANCH_NAME == 'add-ci-cd'
                }
            }
            steps {
                script {
                    def parallelTopLevelSteps = [:]

                    parallelTopLevelSteps['8.9'] = {
                        def parallelNestedSteps = [:]

                        parallelNestedSteps['8.9-lts-jdk8'] = { performParallelStages("8.9", ipAddress89,"lts") }
                        parallelNestedSteps['8.9-lts-jdk11'] = { performParallelStages("8.9", ipAddress89,"lts-jdk11") }

                        parallel(parallelNestedSteps)
                    }

                    parallelTopLevelSteps['9.0'] = {
                        def parallelNestedSteps = [:]

                        parallelNestedSteps['9.0-lts-jdk8'] = { performParallelStages("9.0", ipAddress90,"lts") }
                        parallelNestedSteps['9.0-lts-jdk11'] = { performParallelStages("9.0", ipAddress90,"lts-jdk11") }

                        parallel(parallelNestedSteps)
                    }

                    parallel(parallelTopLevelSteps)
                }
            }
        }*/
    }
    
    post {
        always {
            //archiveArtifacts "*.zip, build/libs/*.hpi, *.log"
            script {
                if (ipAddress90 != null) {
                    /*node(vmName + "-9.0") {
                                kit.zipStashInstallationLogs("CxSAST-9.0-Logs")
                            }
                            unstash "CxSAST-9.0-Logs"*/
                    deleteVm(provider, ipAddress90, vmName + "-9.0")
                }
                if (ipAddress92 != null) {
                    /*node(vmName + "-9.2") {
                                kit.zipStashInstallationLogs("CxSAST-9.2-Logs")
                            }
                            unstash "CxSAST-9.2-Logs"*/
                    deleteVm(provider, ipAddress92, vmName + "-9.2")
                }
                if (ipAddress93 != null) {
                    /*node(vmName + "-9.3") {
                                kit.zipStashInstallationLogs("CxSAST-9.3-Logs")
                            }
                            unstash "CxSAST-9.3-Logs"*/
                    deleteVm(provider, ipAddress93, vmName + "-9.3")
                }
                /*try {
                    kit.Command_Execution_Sh("jq -n env > env.json")
                    kit.Command_Execution_Sh("curl -sb -k -v -H \"Content-type: application/json\" -XPOST http://cx-elastic01:9200/cx-client-common/_doc -d @env.json")
                } catch (Exception e) {
                    kit.Warning_Msg("The message couldn't be pushed to elastic, error:\n" + e.toString())
                }*/
            }
        }
        cleanup {
            cleanWs()
        }
    }
}
